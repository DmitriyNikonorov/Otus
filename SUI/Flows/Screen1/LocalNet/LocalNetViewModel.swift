//
//  LocalNetViewModel.swift
//  SUI
//
//  Created by –î–º–∏—Ç—Ä–∏–π –ù–∏–∫–æ–Ω–æ—Ä–æ–≤ on 30.09.2025.
//

import MultipeerConnectivity
import SwiftUI

class MPCManager: NSObject, ObservableObject {
    private let serviceType = "mpc-chat"
    /// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Ä—è–¥–æ–º
    private var peerID: MCPeerID
    /// –°–µ—Å—Å–∏—è –ø–æ –ø–æ–∏—Å–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    private var session: MCSession
    /// –°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–∞–Ω–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    private var advertiser: MCNearbyServiceAdvertiser? // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç –≤–º–µ—Å—Ç–æ MCAdvertiserAssistant
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    private var browser: MCNearbyServiceBrowser?

    @Published var connectedPeers: [MCPeerID] = []
    @Published var messages: [ChatMessage] = []
    @Published var isConnected = false
    @Published var availablePeers: [MCPeerID] = []
    @Published var isAdvertising = false
    @Published var isBrowsing = false
    @Published var invitationDeviceName: String?
    @Published var isShowAlert: Bool = false

    var outerInvitationHandler: ((Bool, MCSession?) -> Void)?
    var getSession: MCSession {
        return session
    }

    override init() {
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        let deviceName = UIDevice.current.name
        let timestamp = Int(Date().timeIntervalSince1970)
        peerID = MCPeerID(displayName: "\(deviceName)-\(timestamp)")

        session = MCSession(peer: peerID, securityIdentity: nil, encryptionPreference: .required)

        super.init()
        session.delegate = self

        print("üöÄ MPCManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: \(peerID.displayName)")
    }

    /// –ù–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–µ—Ç—å
    func startAdvertising() {
        // –¢–æ—Ä–º–∞–∑–∏–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é
        stopAdvertising()

        advertiser = MCNearbyServiceAdvertiser(
            peer: peerID,
            discoveryInfo: ["app": "mpc-demo"],
            serviceType: serviceType
        )
        advertiser?.delegate = self
        advertiser?.startAdvertisingPeer()

        isAdvertising = true
        print("üì° –° —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ \(peerID) –Ω–∞—á–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞: \(serviceType)")
    }

    func stopAdvertising() {
        advertiser?.stopAdvertisingPeer()
        advertiser = nil
        isAdvertising = false
    }

    func startBrowsing() {
        stopBrowsing() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–∏—Å–∫

        browser = MCNearbyServiceBrowser(peer: peerID, serviceType: serviceType)
        browser?.delegate = self
        browser?.startBrowsingForPeers()

        isBrowsing = true
        print("üîç –ù–∞—á–∞—Ç –ø–æ–∏—Å–∫ —Å–µ—Ä–≤–∏—Å–∞: \(serviceType)")
    }

    func stopBrowsing() {
        browser?.stopBrowsingForPeers()
        browser = nil
        availablePeers.removeAll()
        isBrowsing = false
    }

    func connectToPeer(_ peer: MCPeerID) {
        browser?.invitePeer(peer, to: session, withContext: nil, timeout: 30)
        print("üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫: \(peer.displayName)")
    }

    func sendMessage(_ text: String) {
        guard
            !text.isEmpty,
            !connectedPeers.isEmpty
        else {
            return
        }

        do {
            if let data = text.data(using: .utf8) {
                try session.send(data, toPeers: connectedPeers, with: .reliable)

                let message = ChatMessage(text: text, isLocal: true)
                DispatchQueue.main.async {
                    self.messages.append(message)
                }
                print("üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: \(text)")
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: \(error)")
        }
    }

    func disconnect() {
        session.disconnect()
        stopAdvertising()
        stopBrowsing()
        connectedPeers.removeAll()
        availablePeers.removeAll()
        isConnected = false
    }

    deinit {
        disconnect()
    }
}

// MARK: - MCSessionDelegate

extension MPCManager: MCSessionDelegate {
    func session(_ session: MCSession, peer peerID: MCPeerID, didChange state: MCSessionState) {
        DispatchQueue.main.async {
            self.connectedPeers = session.connectedPeers
            self.isConnected = !session.connectedPeers.isEmpty

            let stateName: String
            switch state {
            case .connected:
                stateName = "–ø–æ–¥–∫–ª—é—á–µ–Ω–æ"

            case .connecting:
                stateName = "–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è"

            case .notConnected:
                stateName = "–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"

            @unknown default:
                stateName = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            }

            print("üîó –°–æ—Å—Ç–æ—è–Ω–∏–µ \(peerID.displayName): \(stateName)")
            print("–í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö: \(self.connectedPeers.count)")
        }
    }

    func session(_ session: MCSession, didReceive data: Data, fromPeer peerID: MCPeerID) {
        if let text = String(data: data, encoding: .utf8) {
            let message = ChatMessage(text: text, isLocal: false, sender: peerID.displayName)
            DispatchQueue.main.async {
                self.messages.append(message)
            }
            print("üì• –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç \(peerID.displayName): \(text)")
        }
    }

    func session(_ session: MCSession, didReceive stream: InputStream, withName streamName: String, fromPeer peerID: MCPeerID) {}
    func session(_ session: MCSession, didStartReceivingResourceWithName resourceName: String, fromPeer peerID: MCPeerID, with progress: Progress) {}
    func session(_ session: MCSession, didFinishReceivingResourceWithName resourceName: String, fromPeer peerID: MCPeerID, at localURL: URL?, withError error: Error?) {}
}

// MARK: - MCNearbyServiceAdvertiserDelegate

extension MPCManager: MCNearbyServiceAdvertiserDelegate {
    func advertiser(
        _ advertiser: MCNearbyServiceAdvertiser,
        didReceiveInvitationFromPeer peerID: MCPeerID,
        withContext context: Data?,
        invitationHandler: @escaping (Bool, MCSession?) -> Void
    ) {
        print("üì© –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç: \(peerID.displayName)")
        invitationDeviceName = peerID.displayName
        isShowAlert = true
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ

        outerInvitationHandler = invitationHandler
    }

    func advertiser(_ advertiser: MCNearbyServiceAdvertiser, didNotStartAdvertisingPeer error: Error) {
        print("‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏: \(error)")
    }
}

// MARK: - MCNearbyServiceBrowserDelegate

extension MPCManager: MCNearbyServiceBrowserDelegate {
    func browser(_ browser: MCNearbyServiceBrowser, foundPeer peerID: MCPeerID, withDiscoveryInfo info: [String : String]?) {
        print("üîç –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: \(peerID.displayName)")
        if !availablePeers.contains(where: { $0.displayName == peerID.displayName }) {
            DispatchQueue.main.async {
                self.availablePeers.append(peerID)
            }
        }
    }

    func browser(_ browser: MCNearbyServiceBrowser, lostPeer peerID: MCPeerID) {
        print("üëª –ü–æ—Ç–µ—Ä—è–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: \(peerID.displayName)")
        DispatchQueue.main.async {
            self.availablePeers.removeAll { $0.displayName == peerID.displayName }
        }
    }

    func browser(_ browser: MCNearbyServiceBrowser, didNotStartBrowsingForPeers error: Error) {
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: \(error)")
    }
}

// MARK: - Data Models
struct ChatMessage: Identifiable {
    let id = UUID()
    let text: String
    let isLocal: Bool
    let sender: String
    let timestamp = Date()

    init(text: String, isLocal: Bool, sender: String = UIDevice.current.name) {
        self.text = text
        self.isLocal = isLocal
        self.sender = sender
    }
}
